@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - VertexHRMS</title>
    <link href="~/css/auth.css" rel="stylesheet" />
</head>
<body>
    <canvas id="constellation-canvas"></canvas>

    <div class="auth-container">
        <div class="auth-card">
            @RenderBody()   <!-- هنا هيتحط جسم الصفحة -->
        </div>
    </div>

    <script src="~/js/constellation.js"></script>
    <script>
        (function () {
          const canvas = document.getElementById('constellation-canvas');
          if (!canvas) return;
          const ctx = canvas.getContext('2d');

          let w = 0, h = 0, dpr = 1;
          const cfg = {
            baseCount: 110,
            speed: 2,
            sizeMin: 1.2,
            sizeMax: 3.2,
            linkDist: 180,
            lineWidth: 1.2,
            particleColor: "17,197,194",
            particleOpacity: 0.95,
            lineOpacity: 0.12,
            driftFactor: 0.12
          };

          let particles = [];

          function resize() {
            w = window.innerWidth;
            h = window.innerHeight;
            dpr = Math.max(1, window.devicePixelRatio || 1);
            canvas.width = Math.round(w * dpr);
            canvas.height = Math.round(h * dpr);
            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
            initParticles();
          }

          function initParticles() {
            particles = [];
            const area = w * h;
            const densityFactor = Math.max(0.5, Math.min(2.0, area / (1400 * 800)));
            const count = Math.round(cfg.baseCount * densityFactor);
            for (let i = 0; i < count; i++) {
              particles.push({
                x: Math.random() * w,
                y: Math.random() * h,
                vx: (Math.random() - 0.5) * cfg.speed * 0.12,
                vy: (Math.random() - 0.5) * cfg.speed * 0.12,
                r: cfg.sizeMin + Math.random() * (cfg.sizeMax - cfg.sizeMin),
                phase: Math.random() * Math.PI * 2
              });
            }
          }

          let last = performance.now();
          function animate(now) {
            const dt = Math.min(80, now - last) / 1000;
            last = now;

            ctx.clearRect(0, 0, w, h);

            for (let i = 0; i < particles.length; i++) {
              const p = particles[i];
              p.phase += dt * 0.35;
              const oscillateX = Math.sin(p.phase * 0.7) * cfg.driftFactor;
              const oscillateY = Math.cos(p.phase * 0.6) * cfg.driftFactor;

              p.x += p.vx * dt * 60 + oscillateX * dt * 20;
              p.y += p.vy * dt * 60 + oscillateY * dt * 20;

              if (p.x < -10) p.x = w + 10;
              if (p.x > w + 10) p.x = -10;
              if (p.y < -10) p.y = h + 10;
              if (p.y > h + 10) p.y = -10;

              const rr = p.r * (0.85 + 0.15 * Math.sin(p.phase * 1.25));
              ctx.beginPath();
              ctx.fillStyle = `rgba(${cfg.particleColor}, ${cfg.particleOpacity})`;
              ctx.arc(p.x, p.y, rr, 0, Math.PI * 2);
              ctx.fill();
            }

            ctx.lineWidth = cfg.lineWidth;
            for (let i = 0; i < particles.length; i++) {
              const a = particles[i];
              for (let j = i + 1; j < particles.length; j++) {
                const b = particles[j];
                const dx = a.x - b.x;
                const dy = a.y - b.y;
                const dist = Math.hypot(dx, dy);
                if (dist < cfg.linkDist) {
                  const alpha = (1 - dist / cfg.linkDist) * cfg.lineOpacity;
                  ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;
                  ctx.beginPath();
                  ctx.moveTo(a.x, a.y);
                  ctx.lineTo(b.x, b.y);
                  ctx.stroke();
                }
              }
            }

            requestAnimationFrame(animate);
          }

          function start() {
            resize();
            last = performance.now();
            requestAnimationFrame(animate);
          }

          window.addEventListener("resize", () => {
            clearTimeout(window._resizeTimeout);
            window._resizeTimeout = setTimeout(resize, 140);
          });

          if (/Mobi|Android|iPhone|iPad/i.test(navigator.userAgent)) {
            cfg.baseCount = Math.round(cfg.baseCount * 0.55);
          }

          if (document.readyState === "loading") {
            window.addEventListener("DOMContentLoaded", start);
          } else {
            start();
          }
        })();
    </script>

</body>
</html>
